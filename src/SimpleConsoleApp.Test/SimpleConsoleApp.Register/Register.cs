// ********RoostGPT********
/*
Test generated by RoostGPT for test test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=Register_2d12bfcaed
ROOST_METHOD_SIG_HASH=Register_56d1dea17d

   ########## Test-Scenarios ##########  

Scenario 1: Registering a Valid Service

Details:
  TestName: TestRegisterValidService.
  Description: This test is meant to check if the method can properly register a valid service.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and a valid service.
  Act: Invoke the Register method with the created service.
  Assert: Use NUnit assertions to check if the service has been registered.
Validation:
  The assertion aims to verify if the service has been registered in the services dictionary. The expected result is that the service is found in the dictionary. This test is significant to ensure the Register method correctly adds new services.

Scenario 2: Registering a Null Service

Details:
  TestName: TestRegisterNullService.
  Description: This test is meant to check if the method can handle null services without throwing an exception.
Execution:
  Arrange: Create an instance of SimpleServiceLocator.
  Act: Invoke the Register method with a null service.
  Assert: Use NUnit assertions to check if a null service has been registered.
Validation:
  The assertion aims to verify if the service has been registered in the services dictionary. The expected result is that the service is not found in the dictionary. This test is significant to ensure the Register method correctly handles null services.

Scenario 3: Duplicate Service Registration

Details:
  TestName: TestRegisterDuplicateService.
  Description: This test is meant to check if the method can handle duplicate service registration.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and a valid service.
  Act: Invoke the Register method twice with the same service.
  Assert: Use NUnit assertions to check if the service has been registered only once.
Validation:
  The assertion aims to verify if the service has been registered only once in the services dictionary. The expected result is that the service is found only once in the dictionary. This test is significant to ensure the Register method correctly handles duplicate service registrations.

Scenario 4: Register Multiple Different Services

Details:
  TestName: TestRegisterMultipleServices.
  Description: This test is meant to check if the method can properly register multiple different services.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and multiple different valid services.
  Act: Invoke the Register method with each service.
  Assert: Use NUnit assertions to check if all services have been registered.
Validation:
  The assertion aims to verify if all services have been registered in the services dictionary. The expected result is that all services are found in the dictionary. This test is significant to ensure the Register method correctly handles multiple service registrations.



*/

// ********RoostGPT********
using System;
using NUnit.Framework;
using Moq;
using SimpleConsoleApp;
using CommonServiceLocator;

namespace SimpleConsoleApp.Test
{
    [TestFixture]
    public class RegisterTest
    {
        private SimpleServiceLocator _serviceLocator;

        [SetUp]
        public void SetUp()
        {
            _serviceLocator = new SimpleServiceLocator();
        }

        [Test]
        public void TestRegisterValidService()
        {
            var mockService = new Mock<IService>();
            _serviceLocator.Register<IService>(mockService.Object);

            var result = ServiceLocator.Current.GetInstance<IService>();

            Assert.IsNotNull(result);
            Assert.AreSame(mockService.Object, result);
        }

        [Test]
        public void TestRegisterNullService()
        {
            _serviceLocator.Register<IService>(null);

            var result = ServiceLocator.Current.GetInstance<IService>();

            Assert.IsNull(result);
        }

        [Test]
        public void TestRegisterDuplicateService()
        {
            var mockService = new Mock<IService>();
            _serviceLocator.Register<IService>(mockService.Object);
            _serviceLocator.Register<IService>(mockService.Object);

            var result = ServiceLocator.Current.GetInstance<IService>();

            Assert.IsNotNull(result);
            Assert.AreSame(mockService.Object, result);
        }

        [Test]
        public void TestRegisterMultipleServices()
        {
            var mockService1 = new Mock<IService>();
            var mockService2 = new Mock<IService>();
            _serviceLocator.Register<IService>(mockService1.Object);
            _serviceLocator.Register<IService>(mockService2.Object);

            var result1 = ServiceLocator.Current.GetInstance<IService>();
            var result2 = ServiceLocator.Current.GetInstance<IService>();

            Assert.IsNotNull(result1);
            Assert.IsNotNull(result2);
            Assert.AreSame(mockService1.Object, result1);
            Assert.AreSame(mockService2.Object, result2);
        }
    }
}
