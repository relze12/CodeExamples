// ********RoostGPT********
/*
Test generated by RoostGPT for test test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=Register_2d12bfcaed
ROOST_METHOD_SIG_HASH=Register_56d1dea17d

   ########## Test-Scenarios ##########  

Scenario 1: Registering a Valid Service

Details:
  TestName: RegisterValidService.
  Description: This test is meant to check that the Register method can properly store a valid service in the services dictionary.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and a mock service of any type (e.g., IService).
  Act: Invoke the Register method with the mock service as the parameter.
  Assert: Use NUnit assertions to check if the service was added to the services dictionary.
Validation:
  The assertion verifies that the service is successfully registered in the services dictionary. This is crucial for the proper functioning of the service locator pattern.

Scenario 2: Registering a Null Service

Details:
  TestName: RegisterNullService.
  Description: This test is meant to check if the Register method can handle a null service being passed as a parameter.
Execution:
  Arrange: Create an instance of SimpleServiceLocator.
  Act: Invoke the Register method with null as the parameter.
  Assert: Use NUnit assertions to check if the services dictionary remains empty.
Validation:
  The assertion verifies that a null service cannot be registered, which is expected behavior to prevent null reference errors in the application.

Scenario 3: Registering Duplicate Services

Details:
  TestName: RegisterDuplicateServices.
  Description: This test is meant to check if the Register method replaces an existing service in the dictionary when a new service of the same type is registered.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and two mock services of the same type.
  Act: Invoke the Register method twice, first with the first mock service and then with the second mock service as the parameter.
  Assert: Use NUnit assertions to check if the service in the services dictionary is the second mock service.
Validation:
  The assertion verifies that the Register method replaces an existing service when a new service of the same type is registered. This ensures that the service locator always provides the most recently registered service of a given type.

Scenario 4: Registering Multiple Different Services

Details:
  TestName: RegisterMultipleDifferentServices.
  Description: This test is designed to check if the Register method can handle registering multiple services of different types.
Execution:
  Arrange: Create an instance of SimpleServiceLocator and mock services of different types.
  Act: Invoke the Register method multiple times with each mock service as the parameter.
  Assert: Use NUnit assertions to check if all the services were added to the services dictionary.
Validation:
  The assertion verifies that the Register method can handle multiple services of different types. This is crucial for the service locator to support a variety of services in the application.


*/

// ********RoostGPT********
using NUnit.Framework;
using Moq;
using SimpleConsoleApp;
using System;

namespace SimpleConsoleApp.Test
{
    [TestFixture]
    public class RegisterTest
    {
        private SimpleServiceLocator serviceLocator;

        [SetUp]
        public void SetUp()
        {
            serviceLocator = new SimpleServiceLocator();
        }

        [Test]
        public void RegisterValidService()
        {
            var mockService = new Mock<IService>();
            serviceLocator.Register<IService>(mockService.Object);

            var registeredService = serviceLocator.GetInstance<IService>();

            Assert.AreSame(mockService.Object, registeredService);
        }

        [Test]
        public void RegisterNullService()
        {
            Assert.Throws<ArgumentNullException>(() => serviceLocator.Register<IService>(null));

            var registeredService = serviceLocator.GetInstance<IService>();

            Assert.IsNull(registeredService);
        }

        [Test]
        public void RegisterDuplicateServices()
        {
            var mockService1 = new Mock<IService>();
            var mockService2 = new Mock<IService>();

            serviceLocator.Register<IService>(mockService1.Object);
            serviceLocator.Register<IService>(mockService2.Object);

            var registeredService = serviceLocator.GetInstance<IService>();

            Assert.AreNotSame(mockService1.Object, registeredService);
            Assert.AreSame(mockService2.Object, registeredService);
        }

        [Test]
        public void RegisterMultipleDifferentServices()
        {
            var mockService1 = new Mock<IService>();
            var mockService2 = new Mock<IAnotherService>();

            serviceLocator.Register<IService>(mockService1.Object);
            serviceLocator.Register<IAnotherService>(mockService2.Object);

            var registeredService1 = serviceLocator.GetInstance<IService>();
            var registeredService2 = serviceLocator.GetInstance<IAnotherService>();

            Assert.AreSame(mockService1.Object, registeredService1);
            Assert.AreSame(mockService2.Object, registeredService2);
        }

        [TearDown]
        public void TearDown()
        {
            serviceLocator = null;
        }
    }
}
